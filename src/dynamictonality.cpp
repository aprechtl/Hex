#include "dynamictonality.h"

// ###########################################################################
// ############################################################## DT CONSTANTS

//                             OMEGA X     OMEGA Y       PSI Y        SNUGGLE      QWERTY TRANSFORM COEFFS
const Layout layout140    = {-.108919060, -1.069035629, -9.181129522, 0.422063799, {1, 1, -7, -8}};
const Layout layout158    = {-.123261625, -1.067476983, -8.112825074, 0.408637855, {1, 1, -6, -7}};
const Layout layout181    = {-.141915911, -1.065157459, -7.046426268, 0.391144177, {1, 1, -5, -6}};
const Layout layout213    = {-.167141567, -1.061491514, -5.982952172, 0.367421905, {1, 1, -4, -5}};
const Layout layout257    = {-.203074629, -1.055206725, -4.924298052, 0.333473172, {1, 1, -3, -4}};
const Layout layout323    = {-.258103349, -1.043112266, -3.874416988, 0.281034902, {1, 1, -2, -3}};
const Layout layout341    = {-.152990496, -1.854911190, -6.536353717, 6.200892964, {0, 1, 1, -3}};
const Layout layout429    = {-.351735575, -1.015373145, -2.843044806, 0.190125603, {1, 1, -1, -2}};
const Layout layout453    = {-.132943551, -2.839934820, -7.521989523, 0.143347569, {1, 2, -2, -5}};
const Layout layout474    = {-.213495397, -1.848924371, -4.683941741, 6.168224387, {0, 1, 1, -2}};
const Layout layout507    = {-.149016038, -2.839136839, -6.710687073, 6.040621433, {-1, 1, 3, -2}};
const Layout layout600Wes = { .930604859, -0.537284966, -1.074569932, 1.570796327, {2, 1, -1, 0}};
const Layout layout600Wic = { .537284966, -0.930604859, -1.861209718, 0.000000000, {1, 0, 0, 1}};
const Layout layout693    = { .149016038, -3.871550234, -6.710687073, 6.040621433, {2, -1, -3, 2}};
const Layout layout726    = { .213495397, -2.83501737,  -4.683941741, 6.168224387, {1, -1, -1, 2}};
const Layout layout747    = { .132943551, -4.682054703, -7.521989523, 0.143347569, {-1, -3, 2, 5}};
const Layout layout771    = { .351735575, -1.827671661, -2.843044806, 0.190125603, {0, -1, 1, 2}};
const Layout layout859    = { .152990496, -4.681442527, -6.536353717, 6.200892964, {1, -2, -1, 3}};
const Layout layout877    = { .258103349, -2.831304722, -3.874416988, 0.281034902, {-1, -2, 2, 3}};
const Layout layout943    = { .203074629, -3.869091327, -4.924298052, 0.333473172, {-2, -3, 3, 4}};
const Layout layout987    = { .167141567, -4.921460658, -5.982952172, 0.367421905, {-3, -4, 4, 5}};
const Layout layout1019   = { .141915911, -5.981268809, -7.046426268, 0.391144177, {-4, -5, 5, 6}};
const Layout layout1042   = { .123261625, -7.045348091, -8.112825074, 0.408637855, {-5, -6, 6, 7}};
const Layout layout1060   = { .108919060, -8.112093893, -9.181129522, 0.422063799, {-6, -7, 7, 8}};

const char *layoutNameArray[] = {"140 -- 9:10",
                                 "158 -- 8:9",
                                 "181 -- 7:8",
                                 "213 -- 6:7",
                                 "257 -- 5:6",
                                 "323 -- 4:5",
                                 "341 -- 7:10",
                                 "429 -- 3:4 (L2)",
                                 "453 -- 8:11",
                                 "474 -- 5:7 (CBA)",
                                 "507 -- 7:9 (Bosanquet)",
                                 "600 -- 1:2 (Wesley)",
                                 "600 -- 2:3 (Wicki)",
                                 "693 -- 7:9 (Bosanquet)",
                                 "726 -- 5:7 (CBA)",
                                 "747 -- 8:11",
                                 "771 -- 3:4 (L2)",
                                 "859 -- 7:10",
                                 "877 -- 4:5",
                                 "943 -- 5:6",
                                 "987 -- 6:7",
                                 "1019 -- 7:8",
                                 "1042 -- 8:9",
                                 "1060 -- 9:10"};

const std::vector<const char *> APSLayoutNames(layoutNameArray, layoutNameArray + 24);

const short AXiSJValues[] = { // should be 99 of them
0, 0, -1, -2, -3, -4, -5, -6, 0, -1, -2, -3, -4, -5, -6, 1, 0, -1, -2, -3, -4, -5,
1, 0, -1, -2, -3, -4, -5, 2, 1, 0, -1, -2, -3, -4, 2, 1, 0, -1, -2, -3, -4, 3,
2, 1, 0, -1, -2, -3, 3, 2, 1, 0, -1, -2, -3, 3, 2, 1, 0, -1, -2, -3, 4, 3, 2, 1,
0, -1, -2, 4, 3, 2, 1, 0, -1, -2, 5, 4, 3, 2, 1, 0, -1, 5, 4, 3, 2, 1, 0, -1, 6,
5, 4, 3, 2, 1, 0
};

const short AXiSKValues[] = { // should be 99 of them
0, -7, -5, -3, -1, 1, 3, 5, -6, -4, -2, 0, 2, 4, 6, -7, -5, -3, -1, 1, 3, 5, -6,
-4, -2, 0, 2, 4, 6, -7, -5, -3, -1, 1, 3, 5, -6, -4, -2, 0, 2, 4, 6, -7, -5, -3,
-1, 1, 3, 5, -6, -4, -2, 0, 2, 4, 6, -5, -3, -1, 1, 3, 5, 7, -6, -4, -2, 0, 2,
4, 6, -5, -3, -1, 1, 3, 5, 7, -6, -4, -2, 0, 2, 4, 6, -5, -3, -1, 1, 3, 5, 7,
-6, -4, -2, 0, 2, 4, 6
};

const short pianoJValues[128] = {
-3, -7, -4, -1, -5, -2, -6, -3, 0, -4, -1, -5, -2, -6, -3, 0, -4, -1, -5, -2, 1,
-3, 0, -4, -1, -5, -2, 1, -3, 0, -4, -1, 2, -2, 1, -3, 0, -4, -1, 2, -2, 1, -3,
0, 3, -1, 2, -2, 1, -3, 0, 3, -1, 2, -2, 1, 4, 0, 3, -1, 2, -2, 1, 4, 0, 3, -1,
2, 5, 1, 4, 0, 3, -1, 2, 5, 1, 4, 0, 3, 6, 2, 5, 1, 4, 0, 3, 6, 2, 5, 1, 4, 7,
3, 6, 2, 5, 1, 4, 7, 3, 6, 2, 5, 8, 4, 7, 3, 6, 2, 5, 8, 4, 7, 3, 6, 9, 5, 8, 4,
7, 3, 6, 9, 5, 8, 4, 7
};

const short pianoKValues[128] = {
-2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4,
3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1,
-4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6,
1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1,
-6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4,
-1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1
};

const short relayerJValues[9][128] = {{-4, -8, -5, -2, -6, -3, -7, -4, -1, -5, -2, -6, -3, -7, -4, -1, -5, -2, -6, -3, 0, -4, -1, -5, -2, -6, -3, 0, -4, -1, -5, -2, 1, -3, 0, -4, -1, -5, -2, 1, -3, 0, -4, -1, 2, -2, 1, -3, 0, -4, -1, 2, -2, 1, -3, 0, 3, -1, 2, -2, 1, -3, 0, 3, -1, 2, -2, 1, 4, 0, 3, -1, 2, -2, 1, 4, 0, 3, -1, 2, 5, 1, 4, 0, 3, -1, 2, 5, 1, 4, 0, 3, 6, 2, 5, 1, 4, 0, 3, 6, 2, 5, 1, 4, 7, 3, 6, 2, 5, 1, 4, 7, 3, 6, 2, 5, 8, 4, 7, 3, 6, 2, 5, 8, 4, 7, 3, 6},
{3, -1, 2, 5, 1, 4, 0, 3, 6, 2, 5, 1, 4, 0, 3, 6, 2, 5, 1, 4, 7, 3, 6, 2, 5, 1, 4, 7, 3, 6, 2, 5, 8, 4, 7, 3, 6, 2, 5, 8, 4, 7, 3, 6, 9, 5, 8, 4, 7, 3, 6, 9, 5, 8, 4, 7, 10, 6, 9, 5, 8, 4, 7, 10, 6, 9, 5, 8, 11, 7, 10, 6, 9, 5, 8, 11, 7, 10, 6, 9, 12, 8, 11, 7, 10, 6, 9, 12, 8, 11, 7, 10, 13, 9, 12, 8, 11, 7, 10, 13, 9, 12, 8, 11, 14, 10, 13, 9, 12, 8, 11, 14, 10, 13, 9, 12, 15, 11, 14, 10, 13, 9, 12, 15, 11, 14, 10, 13},
{-11, -15, -12, -9, -13, -10, -14, -11, -8, -12, -9, -13, -10, -14, -11, -8, -12, -9, -13, -10, -7, -11, -8, -12, -9, -13, -10, -7, -11, -8, -12, -9, -6, -10, -7, -11, -8, -12, -9, -6, -10, -7, -11, -8, -5, -9, -6, -10, -7, -11, -8, -5, -9, -6, -10, -7, -4, -8, -5, -9, -6, -10, -7, -4, -8, -5, -9, -6, -3, -7, -4, -8, -5, -9, -6, -3, -7, -4, -8, -5, -2, -6, -3, -7, -4, -8, -5, -2, -6, -3, -7, -4, -1, -5, -2, -6, -3, -7, -4, -1, -5, -2, -6, -3, 0, -4, -1, -5, -2, -6, -3, 0, -4, -1, -5, -2, 1, -3, 0, -4, -1, -5, -2, 1, -3, 0, -4, -1},
{-17, -14, -18, -15, -12, -16, -13, -17, -14, -18, -15, -12, -16, -13, -17, -14, -11, -15, -12, -16, -13, -17, -14, -11, -15, -12, -16, -13, -10, -14, -11, -15, -12, -16, -13, -10, -14, -11, -15, -12, -9, -13, -10, -14, -11, -15, -12, -9, -13, -10, -14, -11, -8, -12, -9, -13, -10, -14, -11, -8, -12, -9, -13, -10, -7, -11, -8, -12, -9, -13, -10, -7, -11, -8, -12, -9, -6, -10, -7, -11, -8, -12, -9, -6, -10, -7, -11, -8, -5, -9, -6, -10, -7, -11, -8, -5, -9, -6, -10, -7, -4, -8, -5, -9, -6, -10, -7, -4, -8, -5, -9, -6, -3, -7, -4, -8, -5, -9, -6, -3, -7, -4, -8, -5, -2, -6, -3, -7},
{-10, -7, -11, -8, -5, -9, -6, -10, -7, -11, -8, -5, -9, -6, -10, -7, -4, -8, -5, -9, -6, -10, -7, -4, -8, -5, -9, -6, -3, -7, -4, -8, -5, -9, -6, -3, -7, -4, -8, -5, -2, -6, -3, -7, -4, -8, -5, -2, -6, -3, -7, -4, -1, -5, -2, -6, -3, -7, -4, -1, -5, -2, -6, -3, 0, -4, -1, -5, -2, -6, -3, 0, -4, -1, -5, -2, 1, -3, 0, -4, -1, -5, -2, 1, -3, 0, -4, -1, 2, -2, 1, -3, 0, -4, -1, 2, -2, 1, -3, 0, 3, -1, 2, -2, 1, -3, 0, 3, -1, 2, -2, 1, 4, 0, 3, -1, 2, -2, 1, 4, 0, 3, -1, 2, 5, 1, 4, 0},
{-24, -21, -25, -22, -19, -23, -20, -24, -21, -25, -22, -19, -23, -20, -24, -21, -18, -22, -19, -23, -20, -24, -21, -18, -22, -19, -23, -20, -17, -21, -18, -22, -19, -23, -20, -17, -21, -18, -22, -19, -16, -20, -17, -21, -18, -22, -19, -16, -20, -17, -21, -18, -15, -19, -16, -20, -17, -21, -18, -15, -19, -16, -20, -17, -14, -18, -15, -19, -16, -20, -17, -14, -18, -15, -19, -16, -13, -17, -14, -18, -15, -19, -16, -13, -17, -14, -18, -15, -12, -16, -13, -17, -14, -18, -15, -12, -16, -13, -17, -14, -11, -15, -12, -16, -13, -17, -14, -11, -15, -12, -16, -13, -10, -14, -11, -15, -12, -16, -13, -10, -14, -11, -15, -12, -9, -13, -10, -14},
{9, 5, 8, 4, 7, 3, 6, 9, 5, 8, 4, 7, 10, 6, 9, 5, 8, 4, 7, 10, 6, 9, 5, 8, 11, 7, 10, 6, 9, 5, 8, 11, 7, 10, 6, 9, 12, 8, 11, 7, 10, 6, 9, 12, 8, 11, 7, 10, 13, 9, 12, 8, 11, 7, 10, 13, 9, 12, 8, 11, 14, 10, 13, 9, 12, 8, 11, 14, 10, 13, 9, 12, 15, 11, 14, 10, 13, 9, 12, 15, 11, 14, 10, 13, 16, 12, 15, 11, 14, 10, 13, 16, 12, 15, 11, 14, 17, 13, 16, 12, 15, 11, 14, 17, 13, 16, 12, 15, 18, 14, 17, 13, 16, 12, 15, 18, 14, 17, 13, 16, 19, 15, 18, 14, 17, 13, 16, 19},
{16, 12, 15, 11, 14, 10, 13, 16, 12, 15, 11, 14, 17, 13, 16, 12, 15, 11, 14, 17, 13, 16, 12, 15, 18, 14, 17, 13, 16, 12, 15, 18, 14, 17, 13, 16, 19, 15, 18, 14, 17, 13, 16, 19, 15, 18, 14, 17, 20, 16, 19, 15, 18, 14, 17, 20, 16, 19, 15, 18, 21, 17, 20, 16, 19, 15, 18, 21, 17, 20, 16, 19, 22, 18, 21, 17, 20, 16, 19, 22, 18, 21, 17, 20, 23, 19, 22, 18, 21, 17, 20, 23, 19, 22, 18, 21, 24, 20, 23, 19, 22, 18, 21, 24, 20, 23, 19, 22, 25, 21, 24, 20, 23, 19, 22, 25, 21, 24, 20, 23, 26, 22, 25, 21, 24, 20, 23, 26},
{2, -2, 1, -3, 0, -4, -1, 2, -2, 1, -3, 0, 3, -1, 2, -2, 1, -3, 0, 3, -1, 2, -2, 1, 4, 0, 3, -1, 2, -2, 1, 4, 0, 3, -1, 2, 5, 1, 4, 0, 3, -1, 2, 5, 1, 4, 0, 3, 6, 2, 5, 1, 4, 0, 3, 6, 2, 5, 1, 4, 7, 3, 6, 2, 5, 1, 4, 7, 3, 6, 2, 5, 8, 4, 7, 3, 6, 2, 5, 8, 4, 7, 3, 6, 9, 5, 8, 4, 7, 3, 6, 9, 5, 8, 4, 7, 10, 6, 9, 5, 8, 4, 7, 10, 6, 9, 5, 8, 11, 7, 10, 6, 9, 5, 8, 11, 7, 10, 6, 9, 12, 8, 11, 7, 10, 6, 9, 12}
};

const short relayerKValues[9][128] = {{-2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1},
{-14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13},
{10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11},
{2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3},
{-10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9},
{14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15},
{-6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5, 2, -3, 4, -1, -6, 1, -4, 3, -2, 5, 0, -5},
{-18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17, -10, -15, -8, -13, -18, -11, -16, -9, -14, -7, -12, -17},
{6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7, 14, 9, 16, 11, 6, 13, 8, 15, 10, 17, 12, 7}
};

const short ref = 62;

// ###########################################################################
// ###########################################################################

DynamicTonality::DynamicTonality() : m_period(1200), m_generator(700)
{
    setAPSLayout(12, false); // wicki, unflipped
}

void DynamicTonality::captureButtonCoordinates(short j, short k, double &x, double &y)
{
    x = k * m_layout.omegaX;
    y = (j * m_layout.psiY) + (k * m_layout.omegaY);
}

void DynamicTonality::captureJKFromAxis(unsigned char pitch, short &j, short &k)
{
    j = AXiSJValues[pitch];
    k = AXiSKValues[pitch];
}

void DynamicTonality::captureJKFromPianoMIDI(unsigned char pitch, short &j, short &k)
{
    j = pianoJValues[pitch];
    k = pianoKValues[pitch];
}

void DynamicTonality::captureJKFromRelayer(unsigned char channel0To15, unsigned char pitch, short &j, short &k)
{
    j = relayerJValues[channel0To15][pitch];
    k = relayerKValues[channel0To15][pitch];
}

void DynamicTonality::captureMIDICCValues(double value0To12288, unsigned char &cc1, unsigned char &cc2, unsigned char &cc3)
{
    value0To12288 *= .0104166666667; // divide by 96
    cc1 = static_cast<unsigned char>(value0To12288); // essentially floor(helper)
    value0To12288 = 128. * (value0To12288 - static_cast<double>(cc1));
    cc2 = static_cast<unsigned char>(value0To12288); // essentially floor(helper)
    value0To12288 = 128. * (value0To12288 - static_cast<double>(cc2));
    cc3 = static_cast<unsigned char>(value0To12288 + .5); // rounds (note: no need to check if (helper < 0) because it never will be)
}

// returns true if successfully converted (i.e., if j and k are within allowable bounds), false otherwise
bool DynamicTonality::captureMIDIFromJK(short j, short k, unsigned char &channel, unsigned char &pitch)
{
    short pitchID = 12 * j + 7 * k + ref; // default pitch conversion

    if (k < -17 || k > 18 || pitchID < -127 || pitchID > 255)
        return false;

    channel = 1; // default channel

    if (pitchID < 0)
    {
        pitch = pitchID + 128;
        channel += 3;
    }
    else if (pitchID > 127)
    {
        pitch = pitchID - 128;
        channel += 6;
    }
    else
    {
        pitch = static_cast<unsigned char>(pitchID);
    }

    if (k < -6)
        channel += 1;
    else if (k > 5)
        channel += 2;

    return true;
}

void DynamicTonality::convertWickiJKToLayoutJK(short &j, short &k) const
{
    //    short int jTemp = j, kTemp = k;
    //    j = -jTemp - kTemp;
    //    k = jTemp + jTemp + jTemp + kTemp + kTemp;

    short wickiJ = j;
    j = m_layout.transformCoeffs[0] * wickiJ + m_layout.transformCoeffs[1] * k;
    k = m_layout.transformCoeffs[2] * wickiJ + m_layout.transformCoeffs[3] * k;
}

const std::vector<const char *> &DynamicTonality::getAPSLayoutNames() // static
{ return APSLayoutNames; }

double DynamicTonality::getUntransformedRelativeBeta() const
{ return fabs(m_layout.omegaX * m_layout.omegaY); }

void DynamicTonality::setAPSLayout(int layoutID, bool flip)
{
    switch (layoutID)
    {
    case 0:  m_layout = layout140;    break; // "140 -- 9:10"
    case 1:  m_layout = layout158;    break; // "158 -- 8:9"
    case 2:  m_layout = layout181;    break; // "181 -- 7:8"
    case 3:  m_layout = layout213;    break; // "213 -- 6:7"
    case 4:  m_layout = layout257;    break; // "257 -- 5:6"
    case 5:  m_layout = layout323;    break; // "323 -- 4:5"
    case 6:  m_layout = layout341;    break; // "341 -- 7:10"
    case 7:  m_layout = layout429;    break; // "429 -- 3:4"
    case 8:  m_layout = layout453;    break; // "453 -- 8:11"
    case 9:  m_layout = layout474;    break; // "474 -- 5:7"
    case 10: m_layout = layout507;    break; // "507 -- 7:9"
    case 11: m_layout = layout600Wes; break; // "600 -- 1:2 (Wesley)"
    case 12: m_layout = layout600Wic; break; // "600 -- 2:3 (Wicki)"
    case 13: m_layout = layout693;    break; // "693 -- 7:9"
    case 14: m_layout = layout726;    break; // "726 -- 5:7"
    case 15: m_layout = layout747;    break; // "747 -- 8:11"
    case 16: m_layout = layout771;    break; // "771 -- 3:4"
    case 17: m_layout = layout859;    break; // "859 -- 7:10"
    case 18: m_layout = layout877;    break; // "877 -- 4:5"
    case 19: m_layout = layout943;    break; // "943 -- 5:6"
    case 20: m_layout = layout987;    break; // "987 -- 6:7"
    case 21: m_layout = layout1019;   break; // "1019 -- 7:8"
    case 22: m_layout = layout1042;   break; // "1042 -- 8:9"
    case 23: m_layout = layout1060;   break; // "1060 -- 9:10"
    }

    if (flip)
    {
        m_layout.omegaX *= -1.;
        m_layout.snuggle = 3.1415927 - m_layout.snuggle;

        m_layout.transformCoeffs[1] = m_layout.transformCoeffs[0] - m_layout.transformCoeffs[1];
        m_layout.transformCoeffs[3] = m_layout.transformCoeffs[2] - m_layout.transformCoeffs[3];
    }

    m_oneOverOmegaX = 1. / m_layout.omegaX;
    m_psiYOverPeriod = m_layout.psiY / m_period;
}
